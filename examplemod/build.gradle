plugins {
    id 'java'
    id 'maven-publish'
}

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

version = project.mod_version
group = project.maven_group

base {
    archivesName = "$mod_name-CR-$cosmicreach_version"
}

repositories {
    mavenCentral()
    maven {
        url 'https://jitpack.io'
    }
    maven {
        url "https://repo.spongepowered.org/maven/"
    }
    maven {
        url "https://maven.fabricmc.net/"
    }
}

dependencies {
    //Cosmic Reach main jar
    implementation(files("$project.rootDir/run/cosmic-reach.jar"))
    implementation project(':modLoader')
}

processResources {
    inputs.property "version", project.version
    inputs.property "loader_version", project.loader_version
    inputs.property "cosmicreach_version", project.cosmicreach_version
    inputs.property "mod_name", project.mod_name
    inputs.property "modid", project.modid
    filteringCharset "UTF-8"

    filesMatching("fabric.mod.json") {
        expand "version": project.version,
                "loader_version": project.loader_version,
                "cosmicreach_version": project.cosmicreach_version,
                "mod_name": project.mod_name,
                "modid": project.modid
    }
}

tasks.withType(JavaCompile).configureEach {
    // ensure that the encoding is set to UTF-8, no matter what the system default is
    // this fixes some edge cases with special characters not displaying correctly
    // see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
    // If Javadoc is generated, this must be specified in that task too.
    it.options.encoding = "UTF-8"
    it.options.release = 17
}

tasks.register('buildAndCopy', Copy) {
    group 'build'
    dependsOn 'assemble'
    from "build/libs/"
    into "../run/mods"
}

//sourceSets.main {
//    runtimeClasspath += files("${project.rootDir}/examplemod")
//}

//TODO: maybe fix it? It works fine without, but it would be more correct.
//tasks.register('runMain', JavaExec) {
//    setMainClass("net.fabricmc.loader.impl.launch.knot.KnotClient")
//    jvmArgs('-Dfabric.skipMcProvider=true', '-Dfabric.side=client', '-Dfabric.development=true')
//    workingDir "${project.rootDir}/run/"
//
//    classpath = sourceSets.main.runtimeClasspath
//    //classpath += files("${project.rootDir}/examplemod/build/classes/java/")
//    //For debugging:
//    project.logger.lifecycle('Classpath: ' + sourceSets.main.runtimeClasspath.asPath)
//}